//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.17929 版自动生成。
// 
#pragma warning disable 1591

namespace MossForSql.MyCustomPermissionsWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback TestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebsListColloctionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRoleCollectionFromWebOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserRoleForFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserRoleForFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserRoleForListOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserRoleForListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserRoleForWebOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveUserRoleForWebOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserRoleForFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserRoleForWebOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddUserRoleForListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearUserRoleForFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearUserRoleForWebOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearUserRoleForListOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserRoleForFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserRoleForWebOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserRoleForListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasUniqueRoleAssignmentsForWebOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasUniqueRoleAssignmentsForListOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasUniqueRoleAssignmentsForFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback BreakORResetRoleInheritanceForWebOperationCompleted;
        
        private System.Threading.SendOrPostCallback BreakORResetRoleInheritanceForListOperationCompleted;
        
        private System.Threading.SendOrPostCallback BreakORResetRoleInheritanceForFolderOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::MossForSql.Properties.Settings.Default.MossForSql_MyCustomPermissionsWebService_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event TestCompletedEventHandler TestCompleted;
        
        /// <remarks/>
        public event GetWebsListColloctionCompletedEventHandler GetWebsListColloctionCompleted;
        
        /// <remarks/>
        public event GetFoldersCompletedEventHandler GetFoldersCompleted;
        
        /// <remarks/>
        public event GetWebPermissionsCompletedEventHandler GetWebPermissionsCompleted;
        
        /// <remarks/>
        public event GetFolderPermissionsCompletedEventHandler GetFolderPermissionsCompleted;
        
        /// <remarks/>
        public event GetListPermissionsCompletedEventHandler GetListPermissionsCompleted;
        
        /// <remarks/>
        public event GetRoleCollectionFromWebCompletedEventHandler GetRoleCollectionFromWebCompleted;
        
        /// <remarks/>
        public event UpdateUserRoleForFolderCompletedEventHandler UpdateUserRoleForFolderCompleted;
        
        /// <remarks/>
        public event RemoveUserRoleForFolderCompletedEventHandler RemoveUserRoleForFolderCompleted;
        
        /// <remarks/>
        public event UpdateUserRoleForListCompletedEventHandler UpdateUserRoleForListCompleted;
        
        /// <remarks/>
        public event RemoveUserRoleForListCompletedEventHandler RemoveUserRoleForListCompleted;
        
        /// <remarks/>
        public event UpdateUserRoleForWebCompletedEventHandler UpdateUserRoleForWebCompleted;
        
        /// <remarks/>
        public event RemoveUserRoleForWebCompletedEventHandler RemoveUserRoleForWebCompleted;
        
        /// <remarks/>
        public event AddUserRoleForFolderCompletedEventHandler AddUserRoleForFolderCompleted;
        
        /// <remarks/>
        public event AddUserRoleForWebCompletedEventHandler AddUserRoleForWebCompleted;
        
        /// <remarks/>
        public event AddUserRoleForListCompletedEventHandler AddUserRoleForListCompleted;
        
        /// <remarks/>
        public event ClearUserRoleForFolderCompletedEventHandler ClearUserRoleForFolderCompleted;
        
        /// <remarks/>
        public event ClearUserRoleForWebCompletedEventHandler ClearUserRoleForWebCompleted;
        
        /// <remarks/>
        public event ClearUserRoleForListCompletedEventHandler ClearUserRoleForListCompleted;
        
        /// <remarks/>
        public event DeleteUserRoleForFolderCompletedEventHandler DeleteUserRoleForFolderCompleted;
        
        /// <remarks/>
        public event DeleteUserRoleForWebCompletedEventHandler DeleteUserRoleForWebCompleted;
        
        /// <remarks/>
        public event DeleteUserRoleForListCompletedEventHandler DeleteUserRoleForListCompleted;
        
        /// <remarks/>
        public event CreateFolderCompletedEventHandler CreateFolderCompleted;
        
        /// <remarks/>
        public event DeleteFolderCompletedEventHandler DeleteFolderCompleted;
        
        /// <remarks/>
        public event HasUniqueRoleAssignmentsForWebCompletedEventHandler HasUniqueRoleAssignmentsForWebCompleted;
        
        /// <remarks/>
        public event HasUniqueRoleAssignmentsForListCompletedEventHandler HasUniqueRoleAssignmentsForListCompleted;
        
        /// <remarks/>
        public event HasUniqueRoleAssignmentsForFolderCompletedEventHandler HasUniqueRoleAssignmentsForFolderCompleted;
        
        /// <remarks/>
        public event BreakORResetRoleInheritanceForWebCompletedEventHandler BreakORResetRoleInheritanceForWebCompleted;
        
        /// <remarks/>
        public event BreakORResetRoleInheritanceForListCompletedEventHandler BreakORResetRoleInheritanceForListCompleted;
        
        /// <remarks/>
        public event BreakORResetRoleInheritanceForFolderCompletedEventHandler BreakORResetRoleInheritanceForFolderCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Test", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Test() {
            object[] results = this.Invoke("Test", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestAsync() {
            this.TestAsync(null);
        }
        
        /// <remarks/>
        public void TestAsync(object userState) {
            if ((this.TestOperationCompleted == null)) {
                this.TestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestOperationCompleted);
            }
            this.InvokeAsync("Test", new object[0], this.TestOperationCompleted, userState);
        }
        
        private void OnTestOperationCompleted(object arg) {
            if ((this.TestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestCompleted(this, new TestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWebsListColloction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetWebsListColloction() {
            object[] results = this.Invoke("GetWebsListColloction", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetWebsListColloctionAsync() {
            this.GetWebsListColloctionAsync(null);
        }
        
        /// <remarks/>
        public void GetWebsListColloctionAsync(object userState) {
            if ((this.GetWebsListColloctionOperationCompleted == null)) {
                this.GetWebsListColloctionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebsListColloctionOperationCompleted);
            }
            this.InvokeAsync("GetWebsListColloction", new object[0], this.GetWebsListColloctionOperationCompleted, userState);
        }
        
        private void OnGetWebsListColloctionOperationCompleted(object arg) {
            if ((this.GetWebsListColloctionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebsListColloctionCompleted(this, new GetWebsListColloctionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFolders", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetFolders(string ListName) {
            object[] results = this.Invoke("GetFolders", new object[] {
                        ListName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetFoldersAsync(string ListName) {
            this.GetFoldersAsync(ListName, null);
        }
        
        /// <remarks/>
        public void GetFoldersAsync(string ListName, object userState) {
            if ((this.GetFoldersOperationCompleted == null)) {
                this.GetFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFoldersOperationCompleted);
            }
            this.InvokeAsync("GetFolders", new object[] {
                        ListName}, this.GetFoldersOperationCompleted, userState);
        }
        
        private void OnGetFoldersOperationCompleted(object arg) {
            if ((this.GetFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFoldersCompleted(this, new GetFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWebPermissions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetWebPermissions() {
            object[] results = this.Invoke("GetWebPermissions", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetWebPermissionsAsync() {
            this.GetWebPermissionsAsync(null);
        }
        
        /// <remarks/>
        public void GetWebPermissionsAsync(object userState) {
            if ((this.GetWebPermissionsOperationCompleted == null)) {
                this.GetWebPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebPermissionsOperationCompleted);
            }
            this.InvokeAsync("GetWebPermissions", new object[0], this.GetWebPermissionsOperationCompleted, userState);
        }
        
        private void OnGetWebPermissionsOperationCompleted(object arg) {
            if ((this.GetWebPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebPermissionsCompleted(this, new GetWebPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFolderPermissions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetFolderPermissions(string ListName, object FolderID) {
            object[] results = this.Invoke("GetFolderPermissions", new object[] {
                        ListName,
                        FolderID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderPermissionsAsync(string ListName, object FolderID) {
            this.GetFolderPermissionsAsync(ListName, FolderID, null);
        }
        
        /// <remarks/>
        public void GetFolderPermissionsAsync(string ListName, object FolderID, object userState) {
            if ((this.GetFolderPermissionsOperationCompleted == null)) {
                this.GetFolderPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderPermissionsOperationCompleted);
            }
            this.InvokeAsync("GetFolderPermissions", new object[] {
                        ListName,
                        FolderID}, this.GetFolderPermissionsOperationCompleted, userState);
        }
        
        private void OnGetFolderPermissionsOperationCompleted(object arg) {
            if ((this.GetFolderPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderPermissionsCompleted(this, new GetFolderPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListPermissions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetListPermissions(string ListName) {
            object[] results = this.Invoke("GetListPermissions", new object[] {
                        ListName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetListPermissionsAsync(string ListName) {
            this.GetListPermissionsAsync(ListName, null);
        }
        
        /// <remarks/>
        public void GetListPermissionsAsync(string ListName, object userState) {
            if ((this.GetListPermissionsOperationCompleted == null)) {
                this.GetListPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListPermissionsOperationCompleted);
            }
            this.InvokeAsync("GetListPermissions", new object[] {
                        ListName}, this.GetListPermissionsOperationCompleted, userState);
        }
        
        private void OnGetListPermissionsOperationCompleted(object arg) {
            if ((this.GetListPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListPermissionsCompleted(this, new GetListPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRoleCollectionFromWeb", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetRoleCollectionFromWeb() {
            object[] results = this.Invoke("GetRoleCollectionFromWeb", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetRoleCollectionFromWebAsync() {
            this.GetRoleCollectionFromWebAsync(null);
        }
        
        /// <remarks/>
        public void GetRoleCollectionFromWebAsync(object userState) {
            if ((this.GetRoleCollectionFromWebOperationCompleted == null)) {
                this.GetRoleCollectionFromWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRoleCollectionFromWebOperationCompleted);
            }
            this.InvokeAsync("GetRoleCollectionFromWeb", new object[0], this.GetRoleCollectionFromWebOperationCompleted, userState);
        }
        
        private void OnGetRoleCollectionFromWebOperationCompleted(object arg) {
            if ((this.GetRoleCollectionFromWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRoleCollectionFromWebCompleted(this, new GetRoleCollectionFromWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserRoleForFolder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateUserRoleForFolder(string objectName, string ListName, object FolderID, string[] RoleName) {
            this.Invoke("UpdateUserRoleForFolder", new object[] {
                        objectName,
                        ListName,
                        FolderID,
                        RoleName});
        }
        
        /// <remarks/>
        public void UpdateUserRoleForFolderAsync(string objectName, string ListName, object FolderID, string[] RoleName) {
            this.UpdateUserRoleForFolderAsync(objectName, ListName, FolderID, RoleName, null);
        }
        
        /// <remarks/>
        public void UpdateUserRoleForFolderAsync(string objectName, string ListName, object FolderID, string[] RoleName, object userState) {
            if ((this.UpdateUserRoleForFolderOperationCompleted == null)) {
                this.UpdateUserRoleForFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserRoleForFolderOperationCompleted);
            }
            this.InvokeAsync("UpdateUserRoleForFolder", new object[] {
                        objectName,
                        ListName,
                        FolderID,
                        RoleName}, this.UpdateUserRoleForFolderOperationCompleted, userState);
        }
        
        private void OnUpdateUserRoleForFolderOperationCompleted(object arg) {
            if ((this.UpdateUserRoleForFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserRoleForFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveUserRoleForFolder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUserRoleForFolder(string objectName, string ListName, object FolderID, string RoleName) {
            this.Invoke("RemoveUserRoleForFolder", new object[] {
                        objectName,
                        ListName,
                        FolderID,
                        RoleName});
        }
        
        /// <remarks/>
        public void RemoveUserRoleForFolderAsync(string objectName, string ListName, object FolderID, string RoleName) {
            this.RemoveUserRoleForFolderAsync(objectName, ListName, FolderID, RoleName, null);
        }
        
        /// <remarks/>
        public void RemoveUserRoleForFolderAsync(string objectName, string ListName, object FolderID, string RoleName, object userState) {
            if ((this.RemoveUserRoleForFolderOperationCompleted == null)) {
                this.RemoveUserRoleForFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserRoleForFolderOperationCompleted);
            }
            this.InvokeAsync("RemoveUserRoleForFolder", new object[] {
                        objectName,
                        ListName,
                        FolderID,
                        RoleName}, this.RemoveUserRoleForFolderOperationCompleted, userState);
        }
        
        private void OnRemoveUserRoleForFolderOperationCompleted(object arg) {
            if ((this.RemoveUserRoleForFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserRoleForFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserRoleForList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateUserRoleForList(string objectName, string ListName, string[] RoleName) {
            this.Invoke("UpdateUserRoleForList", new object[] {
                        objectName,
                        ListName,
                        RoleName});
        }
        
        /// <remarks/>
        public void UpdateUserRoleForListAsync(string objectName, string ListName, string[] RoleName) {
            this.UpdateUserRoleForListAsync(objectName, ListName, RoleName, null);
        }
        
        /// <remarks/>
        public void UpdateUserRoleForListAsync(string objectName, string ListName, string[] RoleName, object userState) {
            if ((this.UpdateUserRoleForListOperationCompleted == null)) {
                this.UpdateUserRoleForListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserRoleForListOperationCompleted);
            }
            this.InvokeAsync("UpdateUserRoleForList", new object[] {
                        objectName,
                        ListName,
                        RoleName}, this.UpdateUserRoleForListOperationCompleted, userState);
        }
        
        private void OnUpdateUserRoleForListOperationCompleted(object arg) {
            if ((this.UpdateUserRoleForListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserRoleForListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveUserRoleForList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUserRoleForList(string objectName, string ListName, string RoleName) {
            this.Invoke("RemoveUserRoleForList", new object[] {
                        objectName,
                        ListName,
                        RoleName});
        }
        
        /// <remarks/>
        public void RemoveUserRoleForListAsync(string objectName, string ListName, string RoleName) {
            this.RemoveUserRoleForListAsync(objectName, ListName, RoleName, null);
        }
        
        /// <remarks/>
        public void RemoveUserRoleForListAsync(string objectName, string ListName, string RoleName, object userState) {
            if ((this.RemoveUserRoleForListOperationCompleted == null)) {
                this.RemoveUserRoleForListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserRoleForListOperationCompleted);
            }
            this.InvokeAsync("RemoveUserRoleForList", new object[] {
                        objectName,
                        ListName,
                        RoleName}, this.RemoveUserRoleForListOperationCompleted, userState);
        }
        
        private void OnRemoveUserRoleForListOperationCompleted(object arg) {
            if ((this.RemoveUserRoleForListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserRoleForListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserRoleForWeb", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateUserRoleForWeb(string objectName, string[] RoleName) {
            this.Invoke("UpdateUserRoleForWeb", new object[] {
                        objectName,
                        RoleName});
        }
        
        /// <remarks/>
        public void UpdateUserRoleForWebAsync(string objectName, string[] RoleName) {
            this.UpdateUserRoleForWebAsync(objectName, RoleName, null);
        }
        
        /// <remarks/>
        public void UpdateUserRoleForWebAsync(string objectName, string[] RoleName, object userState) {
            if ((this.UpdateUserRoleForWebOperationCompleted == null)) {
                this.UpdateUserRoleForWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserRoleForWebOperationCompleted);
            }
            this.InvokeAsync("UpdateUserRoleForWeb", new object[] {
                        objectName,
                        RoleName}, this.UpdateUserRoleForWebOperationCompleted, userState);
        }
        
        private void OnUpdateUserRoleForWebOperationCompleted(object arg) {
            if ((this.UpdateUserRoleForWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserRoleForWebCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveUserRoleForWeb", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveUserRoleForWeb(string objectName, string RoleName) {
            this.Invoke("RemoveUserRoleForWeb", new object[] {
                        objectName,
                        RoleName});
        }
        
        /// <remarks/>
        public void RemoveUserRoleForWebAsync(string objectName, string RoleName) {
            this.RemoveUserRoleForWebAsync(objectName, RoleName, null);
        }
        
        /// <remarks/>
        public void RemoveUserRoleForWebAsync(string objectName, string RoleName, object userState) {
            if ((this.RemoveUserRoleForWebOperationCompleted == null)) {
                this.RemoveUserRoleForWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveUserRoleForWebOperationCompleted);
            }
            this.InvokeAsync("RemoveUserRoleForWeb", new object[] {
                        objectName,
                        RoleName}, this.RemoveUserRoleForWebOperationCompleted, userState);
        }
        
        private void OnRemoveUserRoleForWebOperationCompleted(object arg) {
            if ((this.RemoveUserRoleForWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveUserRoleForWebCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUserRoleForFolder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUserRoleForFolder(string UserName, string UserType, string ListName, object FolderID, string[] RoleName) {
            this.Invoke("AddUserRoleForFolder", new object[] {
                        UserName,
                        UserType,
                        ListName,
                        FolderID,
                        RoleName});
        }
        
        /// <remarks/>
        public void AddUserRoleForFolderAsync(string UserName, string UserType, string ListName, object FolderID, string[] RoleName) {
            this.AddUserRoleForFolderAsync(UserName, UserType, ListName, FolderID, RoleName, null);
        }
        
        /// <remarks/>
        public void AddUserRoleForFolderAsync(string UserName, string UserType, string ListName, object FolderID, string[] RoleName, object userState) {
            if ((this.AddUserRoleForFolderOperationCompleted == null)) {
                this.AddUserRoleForFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserRoleForFolderOperationCompleted);
            }
            this.InvokeAsync("AddUserRoleForFolder", new object[] {
                        UserName,
                        UserType,
                        ListName,
                        FolderID,
                        RoleName}, this.AddUserRoleForFolderOperationCompleted, userState);
        }
        
        private void OnAddUserRoleForFolderOperationCompleted(object arg) {
            if ((this.AddUserRoleForFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserRoleForFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUserRoleForWeb", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUserRoleForWeb(string UserName, string UserType, string[] RoleName) {
            this.Invoke("AddUserRoleForWeb", new object[] {
                        UserName,
                        UserType,
                        RoleName});
        }
        
        /// <remarks/>
        public void AddUserRoleForWebAsync(string UserName, string UserType, string[] RoleName) {
            this.AddUserRoleForWebAsync(UserName, UserType, RoleName, null);
        }
        
        /// <remarks/>
        public void AddUserRoleForWebAsync(string UserName, string UserType, string[] RoleName, object userState) {
            if ((this.AddUserRoleForWebOperationCompleted == null)) {
                this.AddUserRoleForWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserRoleForWebOperationCompleted);
            }
            this.InvokeAsync("AddUserRoleForWeb", new object[] {
                        UserName,
                        UserType,
                        RoleName}, this.AddUserRoleForWebOperationCompleted, userState);
        }
        
        private void OnAddUserRoleForWebOperationCompleted(object arg) {
            if ((this.AddUserRoleForWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserRoleForWebCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUserRoleForList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddUserRoleForList(string UserName, string UserType, string ListName, string[] RoleName) {
            this.Invoke("AddUserRoleForList", new object[] {
                        UserName,
                        UserType,
                        ListName,
                        RoleName});
        }
        
        /// <remarks/>
        public void AddUserRoleForListAsync(string UserName, string UserType, string ListName, string[] RoleName) {
            this.AddUserRoleForListAsync(UserName, UserType, ListName, RoleName, null);
        }
        
        /// <remarks/>
        public void AddUserRoleForListAsync(string UserName, string UserType, string ListName, string[] RoleName, object userState) {
            if ((this.AddUserRoleForListOperationCompleted == null)) {
                this.AddUserRoleForListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserRoleForListOperationCompleted);
            }
            this.InvokeAsync("AddUserRoleForList", new object[] {
                        UserName,
                        UserType,
                        ListName,
                        RoleName}, this.AddUserRoleForListOperationCompleted, userState);
        }
        
        private void OnAddUserRoleForListOperationCompleted(object arg) {
            if ((this.AddUserRoleForListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddUserRoleForListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClearUserRoleForFolder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ClearUserRoleForFolder(string ListName, object FolderID) {
            this.Invoke("ClearUserRoleForFolder", new object[] {
                        ListName,
                        FolderID});
        }
        
        /// <remarks/>
        public void ClearUserRoleForFolderAsync(string ListName, object FolderID) {
            this.ClearUserRoleForFolderAsync(ListName, FolderID, null);
        }
        
        /// <remarks/>
        public void ClearUserRoleForFolderAsync(string ListName, object FolderID, object userState) {
            if ((this.ClearUserRoleForFolderOperationCompleted == null)) {
                this.ClearUserRoleForFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearUserRoleForFolderOperationCompleted);
            }
            this.InvokeAsync("ClearUserRoleForFolder", new object[] {
                        ListName,
                        FolderID}, this.ClearUserRoleForFolderOperationCompleted, userState);
        }
        
        private void OnClearUserRoleForFolderOperationCompleted(object arg) {
            if ((this.ClearUserRoleForFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearUserRoleForFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClearUserRoleForWeb", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ClearUserRoleForWeb() {
            this.Invoke("ClearUserRoleForWeb", new object[0]);
        }
        
        /// <remarks/>
        public void ClearUserRoleForWebAsync() {
            this.ClearUserRoleForWebAsync(null);
        }
        
        /// <remarks/>
        public void ClearUserRoleForWebAsync(object userState) {
            if ((this.ClearUserRoleForWebOperationCompleted == null)) {
                this.ClearUserRoleForWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearUserRoleForWebOperationCompleted);
            }
            this.InvokeAsync("ClearUserRoleForWeb", new object[0], this.ClearUserRoleForWebOperationCompleted, userState);
        }
        
        private void OnClearUserRoleForWebOperationCompleted(object arg) {
            if ((this.ClearUserRoleForWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearUserRoleForWebCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClearUserRoleForList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ClearUserRoleForList(string ListName) {
            this.Invoke("ClearUserRoleForList", new object[] {
                        ListName});
        }
        
        /// <remarks/>
        public void ClearUserRoleForListAsync(string ListName) {
            this.ClearUserRoleForListAsync(ListName, null);
        }
        
        /// <remarks/>
        public void ClearUserRoleForListAsync(string ListName, object userState) {
            if ((this.ClearUserRoleForListOperationCompleted == null)) {
                this.ClearUserRoleForListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearUserRoleForListOperationCompleted);
            }
            this.InvokeAsync("ClearUserRoleForList", new object[] {
                        ListName}, this.ClearUserRoleForListOperationCompleted, userState);
        }
        
        private void OnClearUserRoleForListOperationCompleted(object arg) {
            if ((this.ClearUserRoleForListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearUserRoleForListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteUserRoleForFolder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteUserRoleForFolder(string UserName, string ListName, object FolderID) {
            this.Invoke("DeleteUserRoleForFolder", new object[] {
                        UserName,
                        ListName,
                        FolderID});
        }
        
        /// <remarks/>
        public void DeleteUserRoleForFolderAsync(string UserName, string ListName, object FolderID) {
            this.DeleteUserRoleForFolderAsync(UserName, ListName, FolderID, null);
        }
        
        /// <remarks/>
        public void DeleteUserRoleForFolderAsync(string UserName, string ListName, object FolderID, object userState) {
            if ((this.DeleteUserRoleForFolderOperationCompleted == null)) {
                this.DeleteUserRoleForFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserRoleForFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteUserRoleForFolder", new object[] {
                        UserName,
                        ListName,
                        FolderID}, this.DeleteUserRoleForFolderOperationCompleted, userState);
        }
        
        private void OnDeleteUserRoleForFolderOperationCompleted(object arg) {
            if ((this.DeleteUserRoleForFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserRoleForFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteUserRoleForWeb", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteUserRoleForWeb(string UserName) {
            this.Invoke("DeleteUserRoleForWeb", new object[] {
                        UserName});
        }
        
        /// <remarks/>
        public void DeleteUserRoleForWebAsync(string UserName) {
            this.DeleteUserRoleForWebAsync(UserName, null);
        }
        
        /// <remarks/>
        public void DeleteUserRoleForWebAsync(string UserName, object userState) {
            if ((this.DeleteUserRoleForWebOperationCompleted == null)) {
                this.DeleteUserRoleForWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserRoleForWebOperationCompleted);
            }
            this.InvokeAsync("DeleteUserRoleForWeb", new object[] {
                        UserName}, this.DeleteUserRoleForWebOperationCompleted, userState);
        }
        
        private void OnDeleteUserRoleForWebOperationCompleted(object arg) {
            if ((this.DeleteUserRoleForWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserRoleForWebCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteUserRoleForList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteUserRoleForList(string UserName, string ListName) {
            this.Invoke("DeleteUserRoleForList", new object[] {
                        UserName,
                        ListName});
        }
        
        /// <remarks/>
        public void DeleteUserRoleForListAsync(string UserName, string ListName) {
            this.DeleteUserRoleForListAsync(UserName, ListName, null);
        }
        
        /// <remarks/>
        public void DeleteUserRoleForListAsync(string UserName, string ListName, object userState) {
            if ((this.DeleteUserRoleForListOperationCompleted == null)) {
                this.DeleteUserRoleForListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserRoleForListOperationCompleted);
            }
            this.InvokeAsync("DeleteUserRoleForList", new object[] {
                        UserName,
                        ListName}, this.DeleteUserRoleForListOperationCompleted, userState);
        }
        
        private void OnDeleteUserRoleForListOperationCompleted(object arg) {
            if ((this.DeleteUserRoleForListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserRoleForListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateFolder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateFolder(string ListName, string CreateFolderName) {
            object[] results = this.Invoke("CreateFolder", new object[] {
                        ListName,
                        CreateFolderName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateFolderAsync(string ListName, string CreateFolderName) {
            this.CreateFolderAsync(ListName, CreateFolderName, null);
        }
        
        /// <remarks/>
        public void CreateFolderAsync(string ListName, string CreateFolderName, object userState) {
            if ((this.CreateFolderOperationCompleted == null)) {
                this.CreateFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFolderOperationCompleted);
            }
            this.InvokeAsync("CreateFolder", new object[] {
                        ListName,
                        CreateFolderName}, this.CreateFolderOperationCompleted, userState);
        }
        
        private void OnCreateFolderOperationCompleted(object arg) {
            if ((this.CreateFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateFolderCompleted(this, new CreateFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteFolder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteFolder(string ListName, object FolderID) {
            this.Invoke("DeleteFolder", new object[] {
                        ListName,
                        FolderID});
        }
        
        /// <remarks/>
        public void DeleteFolderAsync(string ListName, object FolderID) {
            this.DeleteFolderAsync(ListName, FolderID, null);
        }
        
        /// <remarks/>
        public void DeleteFolderAsync(string ListName, object FolderID, object userState) {
            if ((this.DeleteFolderOperationCompleted == null)) {
                this.DeleteFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteFolder", new object[] {
                        ListName,
                        FolderID}, this.DeleteFolderOperationCompleted, userState);
        }
        
        private void OnDeleteFolderOperationCompleted(object arg) {
            if ((this.DeleteFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HasUniqueRoleAssignmentsForWeb", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasUniqueRoleAssignmentsForWeb() {
            object[] results = this.Invoke("HasUniqueRoleAssignmentsForWeb", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasUniqueRoleAssignmentsForWebAsync() {
            this.HasUniqueRoleAssignmentsForWebAsync(null);
        }
        
        /// <remarks/>
        public void HasUniqueRoleAssignmentsForWebAsync(object userState) {
            if ((this.HasUniqueRoleAssignmentsForWebOperationCompleted == null)) {
                this.HasUniqueRoleAssignmentsForWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasUniqueRoleAssignmentsForWebOperationCompleted);
            }
            this.InvokeAsync("HasUniqueRoleAssignmentsForWeb", new object[0], this.HasUniqueRoleAssignmentsForWebOperationCompleted, userState);
        }
        
        private void OnHasUniqueRoleAssignmentsForWebOperationCompleted(object arg) {
            if ((this.HasUniqueRoleAssignmentsForWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasUniqueRoleAssignmentsForWebCompleted(this, new HasUniqueRoleAssignmentsForWebCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HasUniqueRoleAssignmentsForList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasUniqueRoleAssignmentsForList(string ListName) {
            object[] results = this.Invoke("HasUniqueRoleAssignmentsForList", new object[] {
                        ListName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasUniqueRoleAssignmentsForListAsync(string ListName) {
            this.HasUniqueRoleAssignmentsForListAsync(ListName, null);
        }
        
        /// <remarks/>
        public void HasUniqueRoleAssignmentsForListAsync(string ListName, object userState) {
            if ((this.HasUniqueRoleAssignmentsForListOperationCompleted == null)) {
                this.HasUniqueRoleAssignmentsForListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasUniqueRoleAssignmentsForListOperationCompleted);
            }
            this.InvokeAsync("HasUniqueRoleAssignmentsForList", new object[] {
                        ListName}, this.HasUniqueRoleAssignmentsForListOperationCompleted, userState);
        }
        
        private void OnHasUniqueRoleAssignmentsForListOperationCompleted(object arg) {
            if ((this.HasUniqueRoleAssignmentsForListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasUniqueRoleAssignmentsForListCompleted(this, new HasUniqueRoleAssignmentsForListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HasUniqueRoleAssignmentsForFolder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasUniqueRoleAssignmentsForFolder(string ListName, object FolderID) {
            object[] results = this.Invoke("HasUniqueRoleAssignmentsForFolder", new object[] {
                        ListName,
                        FolderID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasUniqueRoleAssignmentsForFolderAsync(string ListName, object FolderID) {
            this.HasUniqueRoleAssignmentsForFolderAsync(ListName, FolderID, null);
        }
        
        /// <remarks/>
        public void HasUniqueRoleAssignmentsForFolderAsync(string ListName, object FolderID, object userState) {
            if ((this.HasUniqueRoleAssignmentsForFolderOperationCompleted == null)) {
                this.HasUniqueRoleAssignmentsForFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasUniqueRoleAssignmentsForFolderOperationCompleted);
            }
            this.InvokeAsync("HasUniqueRoleAssignmentsForFolder", new object[] {
                        ListName,
                        FolderID}, this.HasUniqueRoleAssignmentsForFolderOperationCompleted, userState);
        }
        
        private void OnHasUniqueRoleAssignmentsForFolderOperationCompleted(object arg) {
            if ((this.HasUniqueRoleAssignmentsForFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasUniqueRoleAssignmentsForFolderCompleted(this, new HasUniqueRoleAssignmentsForFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BreakORResetRoleInheritanceForWeb", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BreakORResetRoleInheritanceForWeb(bool breakRole) {
            this.Invoke("BreakORResetRoleInheritanceForWeb", new object[] {
                        breakRole});
        }
        
        /// <remarks/>
        public void BreakORResetRoleInheritanceForWebAsync(bool breakRole) {
            this.BreakORResetRoleInheritanceForWebAsync(breakRole, null);
        }
        
        /// <remarks/>
        public void BreakORResetRoleInheritanceForWebAsync(bool breakRole, object userState) {
            if ((this.BreakORResetRoleInheritanceForWebOperationCompleted == null)) {
                this.BreakORResetRoleInheritanceForWebOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBreakORResetRoleInheritanceForWebOperationCompleted);
            }
            this.InvokeAsync("BreakORResetRoleInheritanceForWeb", new object[] {
                        breakRole}, this.BreakORResetRoleInheritanceForWebOperationCompleted, userState);
        }
        
        private void OnBreakORResetRoleInheritanceForWebOperationCompleted(object arg) {
            if ((this.BreakORResetRoleInheritanceForWebCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BreakORResetRoleInheritanceForWebCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BreakORResetRoleInheritanceForList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BreakORResetRoleInheritanceForList(string ListName, bool breakRole) {
            this.Invoke("BreakORResetRoleInheritanceForList", new object[] {
                        ListName,
                        breakRole});
        }
        
        /// <remarks/>
        public void BreakORResetRoleInheritanceForListAsync(string ListName, bool breakRole) {
            this.BreakORResetRoleInheritanceForListAsync(ListName, breakRole, null);
        }
        
        /// <remarks/>
        public void BreakORResetRoleInheritanceForListAsync(string ListName, bool breakRole, object userState) {
            if ((this.BreakORResetRoleInheritanceForListOperationCompleted == null)) {
                this.BreakORResetRoleInheritanceForListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBreakORResetRoleInheritanceForListOperationCompleted);
            }
            this.InvokeAsync("BreakORResetRoleInheritanceForList", new object[] {
                        ListName,
                        breakRole}, this.BreakORResetRoleInheritanceForListOperationCompleted, userState);
        }
        
        private void OnBreakORResetRoleInheritanceForListOperationCompleted(object arg) {
            if ((this.BreakORResetRoleInheritanceForListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BreakORResetRoleInheritanceForListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BreakORResetRoleInheritanceForFolder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BreakORResetRoleInheritanceForFolder(string ListName, object FolderID, bool breakRole) {
            this.Invoke("BreakORResetRoleInheritanceForFolder", new object[] {
                        ListName,
                        FolderID,
                        breakRole});
        }
        
        /// <remarks/>
        public void BreakORResetRoleInheritanceForFolderAsync(string ListName, object FolderID, bool breakRole) {
            this.BreakORResetRoleInheritanceForFolderAsync(ListName, FolderID, breakRole, null);
        }
        
        /// <remarks/>
        public void BreakORResetRoleInheritanceForFolderAsync(string ListName, object FolderID, bool breakRole, object userState) {
            if ((this.BreakORResetRoleInheritanceForFolderOperationCompleted == null)) {
                this.BreakORResetRoleInheritanceForFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBreakORResetRoleInheritanceForFolderOperationCompleted);
            }
            this.InvokeAsync("BreakORResetRoleInheritanceForFolder", new object[] {
                        ListName,
                        FolderID,
                        breakRole}, this.BreakORResetRoleInheritanceForFolderOperationCompleted, userState);
        }
        
        private void OnBreakORResetRoleInheritanceForFolderOperationCompleted(object arg) {
            if ((this.BreakORResetRoleInheritanceForFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BreakORResetRoleInheritanceForFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TestCompletedEventHandler(object sender, TestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetWebsListColloctionCompletedEventHandler(object sender, GetWebsListColloctionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebsListColloctionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebsListColloctionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFoldersCompletedEventHandler(object sender, GetFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetWebPermissionsCompletedEventHandler(object sender, GetWebPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFolderPermissionsCompletedEventHandler(object sender, GetFolderPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetListPermissionsCompletedEventHandler(object sender, GetListPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetRoleCollectionFromWebCompletedEventHandler(object sender, GetRoleCollectionFromWebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRoleCollectionFromWebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRoleCollectionFromWebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateUserRoleForFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RemoveUserRoleForFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateUserRoleForListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RemoveUserRoleForListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateUserRoleForWebCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RemoveUserRoleForWebCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddUserRoleForFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddUserRoleForWebCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddUserRoleForListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ClearUserRoleForFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ClearUserRoleForWebCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ClearUserRoleForListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteUserRoleForFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteUserRoleForWebCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteUserRoleForListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CreateFolderCompletedEventHandler(object sender, CreateFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void HasUniqueRoleAssignmentsForWebCompletedEventHandler(object sender, HasUniqueRoleAssignmentsForWebCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasUniqueRoleAssignmentsForWebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasUniqueRoleAssignmentsForWebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void HasUniqueRoleAssignmentsForListCompletedEventHandler(object sender, HasUniqueRoleAssignmentsForListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasUniqueRoleAssignmentsForListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasUniqueRoleAssignmentsForListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void HasUniqueRoleAssignmentsForFolderCompletedEventHandler(object sender, HasUniqueRoleAssignmentsForFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasUniqueRoleAssignmentsForFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasUniqueRoleAssignmentsForFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void BreakORResetRoleInheritanceForWebCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void BreakORResetRoleInheritanceForListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void BreakORResetRoleInheritanceForFolderCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591